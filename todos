PRIORITY:
? -> https://codesandbox.io/s/ly63y37x9z forked load more codesandbox
? -> https://codesandbox.io/s/4q88rkpk40
[x][Core MVP] Fetching more candles with usage of Btfx rest API
    [x][BEM] Create useCandles hook 
    [x][BEM] Fix rest service - probably CORS  
    [x][BEM] Fix candles response mapping
[x] Keeping pane and zoom position after changing data on the chart
    [x] Calculate index taking into consideration 1000 data loaded and previous data and start - stop
[] Dynamically changing timeFrame and Cryptocurrency

Core MVP:
[x] initial data displayed
[x] Updating Candles 
[x] Fetching more candles with usage of Btfx rest API
[x] Keeping pane and zoom position after changing data on the chart
[] Dynamically changing timeFrame and Cryptocurrency
[] Writing Symulation based on downloaded data
    [] Look how indicators are made e.g. MA http://rrag.github.io/react-stockcharts/documentation.html#/moving_average
    [] What type of data can be an input for predictions, how output should looks like
    [] How can we use Volume bars http://rrag.github.io/react-stockcharts/documentation.html#/volume_bar

Additionally: 
[] *! jak zerwie połączenie to trzeba nawiązać ponownie
[] * volumes screen displayed
[] actionCreator copy

Bugs/Errors/Meantime tasks:
[] fix problem with dynamic change of  <CandlestickSeries width={timeIntervalBarWidth(utcMinute)} />

Temp notes:

Draw a chart for a start:

1. data
2. const indexCalculator = discontinuousTimeScaleProviderBuilder().indexCalculator();
3. const { index } = indexCalculator(data);
4. const xScaleProvider = discontinuousTimeScaleProviderBuilder().withIndex(
      index
    );
5. 
    const {
      data: linearData,
      xScale,
      xAccessor,
      displayXAccessor
    } = xScaleProvider(calculatedData.slice(-LENGTH_TO_SHOW));

handleDownloadMore:

1. data
2. const indexCalculator = discontinuousTimeScaleProviderBuilder()
      .initialIndex(Math.ceil(start))
      .indexCalculator();
3. const { index } = indexCalculator(data);
4. const xScaleProvider = discontinuousTimeScaleProviderBuilder()
      .initialIndex(Math.ceil(start))
      .withIndex(index);
5.  const {
      data: linearData,
      xScale,
      xAccessor,
      displayXAccessor
    } = xScaleProvider(data);

Conclusions:
.initialIndex(Math.ceil(start)) is the difference